
    Operator-sdk installed
    Helm V3
    Docker installed
    access to a Docker image repository such as Docker Hub


$ helm search hub wordpress
URL                                                 CHART VERSION   APP VERSION     DESCRIPTION                                       
https://artifacthub.io/packages/helm/bitnami/wo...  10.6.4          5.6.1           Web publishing platform for building blogs and ...
https://artifacthub.io/packages/helm/groundhog2...  0.2.6           5.6.0-apache    A Helm chart for WordPress on Kubernetes          
https://artifacthub.io/packages/helm/seccurecod...  2.4.0           4.0             Insecure & Outdated WordPress Instance: Never e...
https://artifacthub.io/packages/helm/presslabs/...  0.10.5          0.10.5          Presslabs WordPress Operator Helm Chart           
https://artifacthub.io/packages/helm/presslabs/...  0.10.3          v0.10.3         A Helm chart for deploying a WordPress site on ...
https://artifacthub.io/packages/helm/seccurecod...  2.4.0           latest          A Helm chart for the WordPress security scanner...
https://artifacthub.io/packages/helm/presslabs/...  0.10.3          v0.10.3         Open-Source WordPress Infrastructure on Kubernetes


$ helm repo add bitnami https://charts.bitnami.com/bitnami
"bitnami" has been added to your repositories

Step 1: Create a project


$ mkdir wordpress-operator
$ cd wordpress-operator
$ operator-sdk init --plugins helm --helm-chart bitnami/wordpress --domain example.com --group helm-chart --version v1alpha1 --kind Wordpress
Created helm-charts/wordpress
Generating RBAC rules
WARN[0011] The RBAC rules generated in config/rbac/role.yaml are based on the chart's default manifest. Some rules may be missing for resources that are only enabled with custom values, and some existing rules may be overly broad. Double check the rules generated in config/rbac/role.yaml to ensure they meet the operator's permission requirements.


Step 2: Build and deploy your operator


$ export USERNAME=<docker-registry-username>
$ make docker-build docker-push IMG=docker.io/$USERNAME/wordpress-operator:v1.0.0 
[...]

    Note that you can set the default name and tag of the image in your Makefile.

    Deploy the operator:

$ make deploy IMG=docker.io/$USERNAME/wordpress-operator:v1.0.0
cd config/manager && projects/wordpress-operator/bin/kustomize edit set image controller=docker.io/user/wordpress-operator:v1.0.0
projects/wordpress-operator/bin/kustomize build config/default | kubectl apply -f -
namespace/wordpress-operator-system unchanged
customresourcedefinition.apiextensions.k8s.io/wordpresses.helm-chart.example.com created
role.rbac.authorization.k8s.io/wordpress-operator-leader-election-role unchanged
clusterrole.rbac.authorization.k8s.io/wordpress-operator-manager-role unchanged
clusterrole.rbac.authorization.k8s.io/wordpress-operator-metrics-reader unchanged
clusterrole.rbac.authorization.k8s.io/wordpress-operator-proxy-role unchanged
rolebinding.rbac.authorization.k8s.io/wordpress-operator-leader-election-rolebinding unchanged
clusterrolebinding.rbac.authorization.k8s.io/wordpress-operator-manager-rolebinding unchanged
clusterrolebinding.rbac.authorization.k8s.io/wordpress-operator-proxy-rolebinding unchanged
service/wordpress-operator-controller-manager-metrics-service unchanged
deployment.apps/wordpress-operator-controller-manager configured

$ kubectl get crds | grep wordpress
wordpresses.helm-chart.example.com                    2021-03-05T01:05:02Z

    Check the controller deployment and pods:

$ kubectl get deployment -n wordpress-operator-system
NAME                                    READY   UP-TO-DATE   AVAILABLE   AGE
wordpress-operator-controller-manager   1/1     1            1           16m
$ kubectl get pods -n wordpress-operator-system
NAME                                                    READY   STATUS    RESTARTS   AGE
wordpress-operator-controller-manager-9cf5dc88d-chjbn   2/2     Running   0          16m

    Check the RBAC:

$ kubectl get clusterroles | grep wordpress
wordpress-operator-manager-role                                        2021-03-05T01:05:03Z
wordpress-operator-metrics-reader                                      2021-03-05T01:05:03Z
wordpress-operator-proxy-role                                          2021-03-05T01:05:04Z
$ kubectl get clusterrolebindings | grep wordpress
wordpress-operator-manager-rolebinding                 ClusterRole/wordpress-operator-manager-role                        16m
wordpress-operator-proxy-rolebinding                   ClusterRole/wordpress-operator-proxy-role                          16m
$ kubectl get roles -n wordpress-operator-system
NAME                                      CREATED AT
wordpress-operator-leader-election-role   2021-03-05T01:05:03Z
$ kubectl get rolebindings -n wordpress-operator-system
NAME                                             ROLE                                           AGE
wordpress-operator-leader-election-rolebinding   Role/wordpress-operator-leader-election-role   16m

Once everything is up and running, you can use your operator to deploy an instance of Wordpress.
Deploy a WordPress instance

    Create a demo WordPress custom resource YAML manifest:

    Note: This is equivalent to a Helm values override file.

    Copy the generated CR manifest:

$ cp config/samples/helm-chart_v1alpha1_wordpress.yaml config/samples/wordpress-demo.yaml

    Change the WordPress chart release name from the default generated name: Update name: wordpress-sample to name: wordpress-demo

    Change one of the values in the manifest to demonstrate that CR manifest exposes the chart values: Change spec.wordpressBlogName to The Demo Blog!. We check this later when the server is running.

    Deploy WordPress:

$ kubectl create ns wordpress-demo
namespace/wordpress-demo created

$ kubectl apply -f config/samples/wordpress-demo.yaml -n wordpress-demo --validate=false
wordpress.helm-chart.example.com/wordpress-demo created

    Note: You need to turn off validation (--validate=false) because the WordPress Helm chart uses null values for some defaults, and this can cause the Kubernetes schema validation to fail. This should not be done in production systems.

    Verify that WordPress is running:

$ kubectl get pods -n wordpress-demo

NAME                                  READY   STATUS    RESTARTS   AGE
pod/wordpress-demo-646d4d897d-qzjbz   1/1     Running   0          88m
pod/wordpress-demo-mariadb-0          1/1     Running   0          88m

    Note: You can also check that Helm deployed the WordPress chart from the operator:

$ helm ls -A

NAME            NAMESPACE       REVISION    UPDATED                                 STATUS      CHART                                   APP VERSION
wordpress-demo  wordpress-demo  1           2021-02-12 18:30:19.542550642 +0000 UTC deployed    wordpress-10.6.4                        5.6.1

    Check that you can access WordPress:

    The details on how to access the WordPress site are in the chart notes when you deploy the chart. You can get the details in one of two ways:

        Check the operator manager logs for the output with the following command:

        $ kubectl logs deployment.apps/wordpress-operator-controller-manager -n wordpress-operator-system -c manager

        Get the notes using the Helm client as follows:

        $ helm get notes wordpress-demo -n wordpress-demo

    Open a browser and access WordPress using the obtained URL. You should see the updated value of THE DEMO BLOG! on the page.

Clean up

WARNING: This command will remove the WordPress deployment, the operator, and all other resources created.

$ kubectl delete -f config/samples/wordpress-demo.yaml -n wordpress-demo
wordpress.helm-chart.example.com "wordpress-demo" deleted

$ make undeploy

projects/operators/helm-charts/wordpress-operator/bin/kustomize build config/default | kubectl delete -f -
namespace "wordpress-operator-system" deleted
customresourcedefinition.apiextensions.k8s.io "wordpresses.helm-chart.example.com" deleted
role.rbac.authorization.k8s.io "wordpress-operator-leader-election-role" deleted
clusterrole.rbac.authorization.k8s.io "wordpress-operator-manager-role" deleted
clusterrole.rbac.authorization.k8s.io "wordpress-operator-metrics-reader" deleted
clusterrole.rbac.authorization.k8s.io "wordpress-operator-proxy-role" deleted
rolebinding.rbac.authorization.k8s.io "wordpress-operator-leader-election-rolebinding" deleted
clusterrolebinding.rbac.authorization.k8s.io "wordpress-operator-manager-rolebinding" deleted
clusterrolebinding.rbac.authorization.k8s.io "wordpress-operator-proxy-rolebinding" deleted
service "wordpress-operator-controller-manager-metrics-service" deleted
deployment.apps "wordpress-operator-controller-manager" deleted

$ kubectl delete -n wordpress-demo --all
persistentvolumeclaim "data-wordpress-demo-mariadb-0" deleted

    Note: You first need to uninstall the release before removing the operator because the operator could be stopped before cleanup and can therefore hang the undeploy waiting. See this Operator SDK issue for more details. As a final step, you need to clean up the PersistentVolumeClaim (PVC) that was created when the chart was deployed. This is because Helm does not remove PVCs by design. See Helm issue for more details.

Next up

Module 3 covers Anisble operators, what they are, and how to build one.
Debugging

The following may be useful in debugging your Helm operator.

    If you are deploying this example to an IBM Kubernetes Service (IKS) cluster, you may need to run the following commands first in your Kubernetes cluster:

    Note: Verify your storageclass with the following command: kubectl get storageclass. If your (default) is prefixed with ibmc-file-, change all names that apply via the commands below.

# Get IKS Helm charts
$ helm repo add iks-charts https://icr.io/helm/iks-charts
$ helm repo update

# Install the plugin
$ helm install 1.6.0 iks-charts/ibmcloud-block-storage-plugin -n kube-system

# Make the IBM Cloud Block Storage the default `storageclass`
$ kubectl patch storageclass ibmc-block-gold -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
$ kubectl patch storageclass ibmc-file-<name> -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'

    Check the operator manager logs for more details on the deployment of the operator and the chart:

$ kubectl logs deployment.apps/wordpress-operator-controller-manager -n wordpress-operator-system -c manager

    If you are on a Mac and using homebrew, and you see the following error when running the make docker-build docker-push command:

[...]
env: Studio: No such file or directory
make: *** [docker-build] Error 127

Action: Edit the Makefile in the SHELL line as follows:

SHELL := env PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin /bin/sh

See this issue about an operator-sdk bug for more details.

    If you are using an OS which does not point sh to the bash shell (Ubuntu for example), and you see the following error when running the make docker-build docker-push command:

failed to start the controlplane. retried 5 times: fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory occurred

Action: Add the following line to the top of the Makefile:

SHELL := /bin/bash

See this issue about an operator-sdk bug for more details.

    WordPress and MariaDB need access for writing to volumes. They use Kubernetes Security to automatically change the ownership of volumes. Kubernetes Security may not work in some clusters and there might be issues with chart deployment as shown below.

WordPress may fail with an error similar to the following:

$ kubectl logs wordpress-demo-566f7497c5-bbqrk -n wordpress-demo

Welcome to the Bitnami wordpress container
Subscribe to project updates by watching https://github.com/bitnami/bitnami-docker-wordpress
Submit issues and feature requests at https://github.com/bitnami/bitnami-docker-wordpress/issues

WARN  ==> You set the environment variable ALLOW_EMPTY_PASSWORD=yes. For safety reasons, do not use this flag in a production environment.
nami    INFO  Initializing apache
nami    INFO  apache successfully initialized
nami    INFO  Initializing mysql-client
nami    INFO  mysql-client successfully initialized
nami    INFO  Initializing wordpress
wordpre INFO  ==> Preparing Varnish environment
wordpre INFO  ==> Preparing Apache environment
wordpre INFO  ==> Preparing PHP environment
mysql-c INFO  Trying to connect to MySQL server
mysql-c INFO  Found MySQL server listening at wordpress-sample-mariadb:3306
mysql-c INFO  MySQL server listening and working at wordpress-sample-mariadb:3306
wordpre INFO  Preparing WordPress environment
Error executing 'postInstallation': EACCES: permission denied, mkdir '/bitnami/wordpress/wp-content'

Action: You need to set spec.volumePermissions.enabled to true in the CR file and redeploy.

MariaDB may fail with an error similar to the following:

$ kubectl logs wordpress-demo-mariadb-0 -n wordpress-demo

Welcome to the Bitnami mariadb container
Subscribe to project updates by watching https://github.com/bitnami/bitnami-docker-mariadb
Submit issues and feature requests at https://github.com/bitnami/bitnami-docker-mariadb/issues
Send us your feedback at containers@bitnami.com

INFO  ==> ** Starting MariaDB setup **
INFO  ==> Validating settings in MYSQL_*/MARIADB_* env vars
INFO  ==> Initializing mariadb database
mkdir: cannot create directory '/bitnami/mariadb/data': Permission denied

Action: You need to set spec.secondary.volumePermissions.enabled to true in CR file and redeploy.

See this document for more details.
